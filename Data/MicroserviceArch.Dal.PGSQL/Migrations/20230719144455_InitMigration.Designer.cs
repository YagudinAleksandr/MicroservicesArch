// <auto-generated />
using System;
using MicroserviceArch.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MicroserviceArch.Dal.PGSQL.Migrations
{
    [DbContext(typeof(DataDB))]
    [Migration("20230719144455_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.ClientEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_clients_role_id");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.CountEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<double>("Count")
                        .HasColumnType("double precision")
                        .HasColumnName("count");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_counts");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_counts_client_id");

                    b.ToTable("counts");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("amount");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<int?>("ClientId1")
                        .HasColumnType("integer")
                        .HasColumnName("client_id1");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ClientId1")
                        .HasDatabaseName("ix_products_client_id1");

                    b.ToTable("products");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.TransactionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientReciverId")
                        .HasColumnType("integer")
                        .HasColumnName("client_reciver_id");

                    b.Property<int?>("ClientSenderId")
                        .HasColumnType("integer")
                        .HasColumnName("client_sender_id");

                    b.Property<int>("CountId")
                        .HasColumnType("integer")
                        .HasColumnName("count_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsComing")
                        .HasColumnType("boolean")
                        .HasColumnName("is_coming");

                    b.Property<double>("Sum")
                        .HasColumnType("double precision")
                        .HasColumnName("sum");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("ClientReciverId")
                        .HasDatabaseName("ix_transactions_client_reciver_id");

                    b.HasIndex("ClientSenderId")
                        .HasDatabaseName("ix_transactions_client_sender_id");

                    b.HasIndex("CountId")
                        .HasDatabaseName("ix_transactions_count_id");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.ClientEntity", b =>
                {
                    b.HasOne("MicroserviceArch.DAL.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_clients_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.CountEntity", b =>
                {
                    b.HasOne("MicroserviceArch.DAL.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_counts_clients_client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.ProductEntity", b =>
                {
                    b.HasOne("MicroserviceArch.DAL.Entities.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1")
                        .HasConstraintName("fk_products_clients_client_id1");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("MicroserviceArch.DAL.Entities.TransactionEntity", b =>
                {
                    b.HasOne("MicroserviceArch.DAL.Entities.ClientEntity", "ClientReciver")
                        .WithMany()
                        .HasForeignKey("ClientReciverId")
                        .HasConstraintName("fk_transactions_clients_client_reciver_id");

                    b.HasOne("MicroserviceArch.DAL.Entities.ClientEntity", "ClientSender")
                        .WithMany()
                        .HasForeignKey("ClientSenderId")
                        .HasConstraintName("fk_transactions_clients_client_sender_id");

                    b.HasOne("MicroserviceArch.DAL.Entities.CountEntity", "Count")
                        .WithMany()
                        .HasForeignKey("CountId")
                        .HasConstraintName("fk_transactions_counts_count_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientReciver");

                    b.Navigation("ClientSender");

                    b.Navigation("Count");
                });
#pragma warning restore 612, 618
        }
    }
}
